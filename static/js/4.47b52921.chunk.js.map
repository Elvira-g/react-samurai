{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","dialogs","dialogsItems","active","messages","message","DialogItem","props","path","id","React","createElement","className","s","dialog","NavLink","to","name","Message","maxLength","maxLengthCreator","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","type","Dialogs","state","dialogsPage","dialogsElements","map","d","key","messagesElements","m","newMessageBody","formData","sendMessage","compose","connect","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,yBAAAC,aAAA,8BAAAC,OAAA,wBAAAC,SAAA,0BAAAC,QAAA,2HCWHC,MARKC,IAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAOC,IAAAC,cAAA,OAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEV,QACtCO,IAAAC,cAACI,IAAO,CAACC,GAAIR,GAAOD,EAAMU,QCDnBC,MAJEX,GACNG,IAAAC,cAAA,OAAKC,UAAWC,IAAEC,QAASP,EAAMF,0CCI5C,MAAMc,EAAYC,YAAiB,IAW7BC,EAAmBC,YAAU,CAACC,KAAM,WAAjBD,CATJf,GACVG,IAAAC,cAAA,QAAMa,SAAUjB,EAAMkB,cACjBf,IAAAC,cAAA,WAAKD,IAAAC,cAACe,IAAK,CAACC,UAAWC,IAAUX,KAAK,UAC1BY,YAAY,qBACZC,SAAU,CAACC,IAAUZ,MACjCT,IAAAC,cAAA,WAAKD,IAAAC,cAAA,UAAQqB,KAAK,UAAS,WA0C5BC,MApCE1B,IAEb,IAAI2B,EAAQ3B,EAAM4B,YAEdC,EAAkBF,EAAMjC,QAAQoC,IAAKC,GAAK5B,IAAAC,cAACL,EAAU,CAACW,KAAMqB,EAAErB,KAAMsB,IAAKD,EAAE7B,GAAIA,GAAI6B,EAAE7B,MACrF+B,EAAmBN,EAAM9B,SAASiC,IAAKI,GAAK/B,IAAAC,cAACO,EAAO,CAACb,QAASoC,EAAEpC,QAASkC,IAAKE,EAAEhC,MAC/DyB,EAAMQ,eAe3B,OACIhC,IAAAC,cAAA,OAAKC,UAAWC,IAAEZ,SACdS,IAAAC,cAAA,OAAKC,UAAWC,IAAEX,cACZkC,GAEN1B,IAAAC,cAAA,OAAKC,UAAWC,IAAET,UACdM,IAAAC,cAAA,WAAO6B,GACP9B,IAAAC,cAAA,WACID,IAAAC,cAACU,EAAgB,CAACG,SAZhBmB,IACdpC,EAAMqC,YAAYD,EAAStC,uCCSpBwC,sBACXC,YAxBmBZ,IACZ,CACHC,YAAaD,EAAMC,cAKDY,IACf,CAIHH,YAAcF,IACVK,EAASC,YAAmBN,QAYpCO,IAFWJ,CAGbZ","file":"static/js/4.47b52921.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__rEUAM\",\"dialogsItems\":\"Dialogs_dialogsItems__2sjX0\",\"active\":\"Dialogs_active__3tXtV\",\"messages\":\"Dialogs_messages__1sVNp\",\"message\":\"Dialogs_message__uggUu\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { Textarea } from '../common/FormsControls/FormsControls';\r\n\r\nconst maxLength = maxLengthCreator(30)\r\n\r\nconst DialogsForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n                <div><Field component={Textarea} name='message'\r\n                            placeholder='Enter your message'\r\n                            validate={[required, maxLength]}/></div>\r\n                <div><button type='submit'>Send</button></div>\r\n            </form>\r\n}\r\n\r\nconst DialogsReduxForm = reduxForm({form: 'dialogs'})(DialogsForm)\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\r\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\r\n    let newMessageBody = state.newMessageBody;\r\n\r\n    // let onSendMessageClick = () => {\r\n    //     props.sendMessage()\r\n    // }\r\n\r\n    // let onNewMessageChange = (e) => {\r\n    //     let body = e.target.value;\r\n    //     props.updateNewMessageBody(body)\r\n    // }\r\n\r\n    const onSubmit = (formData) => {\r\n        props.sendMessage(formData.message)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{ messagesElements }</div>\r\n                <div>\r\n                    <DialogsReduxForm onSubmit={onSubmit}  />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n// <form>\r\n//                 <div><textarea value={newMessageBody} \r\n//                                 onChange={onNewMessageChange}\r\n//                                 placeholder='Enter your message'/></div>\r\n//                 <div><button onClick={onSendMessageClick}>Send</button></div>\r\n//             </form>","import React from 'react';\r\nimport { sendMessageCreator } from '../../redux/dialogs-reduser.js';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect.js';\r\nimport { compose } from 'redux';\r\n\r\n// const DialogsContainer = (props) => {\r\n\r\n//     let state = props.store.getState().dialogsPage;\r\n\r\n//     let onSendMessageClick = () => {\r\n//         props.store.dispatch(sendMessageCreator())\r\n//     }\r\n\r\n//     let onNewMessageChange = (body) => {\r\n//         props.store.dispatch(updateNewMessageBodyCreator(body))\r\n//     }\r\n\r\n//     return (\r\n//         <Dialogs updateNewMessageBody={onNewMessageChange} sendMessage={onSendMessageClick} dialogsPage={state} />\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        // isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // updateNewMessageBody: (body) => {\r\n        //     dispatch(updateNewMessageBodyCreator(body))\r\n        // },\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}